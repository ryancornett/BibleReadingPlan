@using BiblePlan.Domain;
@using BiblePlan.Services;
@using BiblePlan.Factories;
@using MudBlazor;
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

@if (isLoading)
{
    <div class="position-absolute top-50 start-50 translate-middle" aria-label="spinning loading disc">
        <MudProgressCircular Color="Color.Info" Size="Size.Large" Indeterminate="true" />
    </div>
}

@if (showAlert)
{
<div class="position-absolute top-50 start-50 translate-middle" aria-label="alert message">
        <MudAlert Severity="Severity.Warning" Variant="Variant.Filled" Dense="true">@alertMessage</MudAlert>
</div>
}

<EditForm Model="plan">
    <div class="container p-4 bg-opacity-75 bg-white align-items-center mb-4">
        <div class="form-row row align-items-start">
            <div class="form-group col-md-4">
                <label for="name" class="fw-bold text-uppercase"><span class="oi oi-info" aria-hidden="true"></span> Plan name</label>
                <input id="name"
                       aria-label="plan name input field"
                       type="text"
                       autocomplete="on"
                       class="form-control mb-2"
                       @bind-value="plan.Name"
                       required />

                <label for="start" class="fw-bold text-uppercase"><span class="oi oi-media-play" aria-hidden="true"></span> Start date</label>
                <InputDate id="start"
                           aria-label="start date calendar picker or text input in yyyy/MM/dd format"
                           class="form-control mb-2"
                           @bind-Value="plan.StartDate" min="@DateTime.Now.ToString("yyyy-MM-dd")"
                           required />

                <label for="end" class="fw-bold text-uppercase"><span class="oi oi-media-stop" aria-hidden="true"></span> End date</label>
                <InputDate id="end"
                           aria-label="end date calendar picker or text input in yyyy/MM/dd format"
                           class="form-control mb-2"
                           @bind-Value="plan.EndDate" min="@DateTime.Now.AddDays(7).ToString("yyyy-MM-dd")"
                           required />

                <label for="time" class="fw-bold text-uppercase"><span class="oi oi-clock" aria-hidden="true"></span> Reading time</label>
                <InputSelect id="time" class="form-control option-dropdown mb-2" @bind-Value="plan.StartTime">
                    <option class="option-dropdown" selected="selected" disabled>--select a time--</option>
                    @foreach (var time in Options.Times)
                    {
                        <option class="option-dropdown" aria-label="@time" @key=time value=@time >@time</option>
                    }
                </InputSelect>

                <div>
                    <label class="fw-bold text-uppercase"><span class="oi oi-list" aria-hidden="true"></span> Reading Days</label>
                    <div class="mb-3 d-flex">
                        <div class="d-flex flex-column">
                            @foreach (var day in Options.Days.GetRange(0, 4))
                            {
                                <div>
                                    <input type="checkbox"
                                           id="@day"
                                           aria-label="@day"
                                           value="@day"
                                           checked="@plan.ReadingDays.Contains(day)"
                                           @onchange="() => ToggleReadingDay(day)" />
                                           <span class="me-2">@day</span>
                                </div>
                            }
                        </div>

                        <div class="d-flex flex-column">
                            @foreach (var day in Options.Days.GetRange(4, 3))
                            {
                                <div>
                                    <input type="checkbox"
                                           id="@day"
                                           aria-label="@day"
                                           value="@day"
                                           checked="@plan.ReadingDays.Contains(day)"
                                           @onchange="() => ToggleReadingDay(day)" />
                                           <span class="me-2">@day</span>
                                </div>
                            }
                        </div>
                    </div>

                </div>

                <div class="col-6">
                    <div class="button-wrapper">
                        <button type="button" class="btn btn-primary" aria-label="download CSV file" @onclick="DownloadCsv">
                            <span class="oi oi-spreadsheet me-1" aria-hidden="true"></span> CSV</button>
                        <button type="button" class="btn btn-primary" aria-label="download iCAL file" @onclick="DownloadiCalFile"><span class="oi oi-calendar me-1" aria-hidden="true"></span> iCal</button>
                        <button type="button" class="btn btn-primary" aria-label="download PDF file or print" @onclick="DownloadTextFile"><span class="oi oi-print me-1" aria-hidden="true"></span> Print</button>
                        <button type="button" aria-label="reset all plan information inputs" class="btn btn-primary" @onclick="ResetPlan"><MudIcon Icon=@Icons.Material.Filled.PlaylistRemove aria-hidden="true"/> Clear</button>
                    </div>
                </div>
            </div>
            <div class="form-group col-md-8">
                <label class="fw-bold text-uppercase" aria-label="books"><span class="oi oi-book" aria-hidden="true"></span> Books</label>
                <h6><span class="badge bg-secondary">Add books in your desired reading order</span></h6>
                <div class="my-2 testament-list">
                    <div>
                        <input id="old-testament" type="checkbox" aria-label="toggle all old testament books"
                                @onchange="() => ToggleOldTestament()" />
                        Old Testament
                        <span class="@openCloseOld" @onclick="() => ShowTestament(1)"></span>
                    </div>

                    <div>
                        <input id="new-testament" type="checkbox" aria-label="toggle all new testament books"
                                @onchange="() => ToggleNewTestament()" />
                        New Testament
                        <span class="@openCloseNew" @onclick="() => ShowTestament(2)"></span>
                    </div>
                </div>

                <div class="my-3 @oldClass">
                    <div class="mb-3 book-list">
                        @for (int i = 0; i < OTDisplayRanges.Count; i++)
                        {
                            <div class="d-flex flex-column me-2">
                                @foreach (var book in Books.OldTestament.GetRange(OTDisplayRanges[i], OTDisplayRanges[i + 1]))
                                {
                                    <div>
                                        <input type="checkbox"
                                               id="@book"
                                               aria-label="@book"
                                               value="@book"
                                               checked="@plan.Books.Contains(book)"
                                        @onchange="() => ToggleBook(book)" />
                                        @book
                                    </div>
                                }
                            </div>
                            i++;
                        }
                    </div>
                </div>

                <div class="my-3 @newClass">
                    <div class="mb-3 book-list">
                        @for (int i = 0; i < NTDisplayRanges.Count; i++)
                        {
                            <div class="d-flex flex-column me-2">
                                @foreach (var book in Books.NewTestament.GetRange(NTDisplayRanges[i], NTDisplayRanges[i + 1]))
                                {
                                    <div>
                                        <input type="checkbox"
                                               id="@book"
                                               aria-label="@book"
                                               value="@book"
                                               checked="@plan.Books.Contains(book)"
                                        @onchange="() => ToggleBook(book)" />
                                        @book
                                    </div>
                                }
                            </div>
                            i++;
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</EditForm>